import { Component, OnInit } from '@angular/core';
import { Event } from '@angular/router';

@Component({
  selector: 'app-pac-man',
  templateUrl: './pac-man.component.html',
  styleUrls: ['./pac-man.component.css'],
})
export class PacManComponent implements OnInit {
  pacManScore: number; //= 0;
  scaredGhosts: boolean; // = false;
  alreadyScaredGhosts: boolean; // = false;
  randomArray;

  movePG: any;
  moveBG: any;
  moveGG: any;
  moveOG: any;
  timer: number; //= 0;

  boardCodes: number[][];

  constructor() {
    this.boardCodes = [
      [
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        6,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        4,
        0,
        31,
        0,
        0,
        0,
        32,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        4,
        0,
        33,
        0,
        0,
        0,
        34,
        0,
        4,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        6,
        0,
        0,
        0,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        4,
      ],
      [
        4,
        6,
        1,
        1,
        1,
        1,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        6,
        0,
        0,
        0,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        6,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        4,
      ],
      [
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
      ],
    ];
  }

  ngOnInit(): void {
    this.pacManScore = 0;
    this.scaredGhosts = false;
    this.alreadyScaredGhosts = false;
    this.randomArray = new Array();
    this.timer = 0;

    this.boardCodes = [
      [
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        6,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        4,
        0,
        31,
        0,
        0,
        0,
        32,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        4,
        0,
        33,
        0,
        0,
        0,
        34,
        0,
        4,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        6,
        0,
        0,
        0,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        4,
      ],
      [
        4,
        6,
        1,
        1,
        1,
        1,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        0,
        0,
        0,
        6,
        0,
        0,
        0,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        1,
        1,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        1,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        1,
        6,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        1,
        4,
        5,
        5,
        5,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        4,
        4,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
      ],
      [
        4,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        6,
        4,
      ],
      [
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
      ],
    ];
    this.generatePacmanBoard();
    //console.log(this.boardCodes[0][0]);
  }

  generatePacmanBoard() {
    //console.log('in function');
    for (let i = 0; i < 26; i++) {
      var rowDiv = document.createElement('div');
      rowDiv.setAttribute('id', 'row-for-divs');
      rowDiv.setAttribute('class', 'container');
      rowDiv.setAttribute('fxLayout', 'row inline');
      // rowDiv.style.display = 'inline-flex';
      //rowDiv.style.flexDirection = 'row';
      //var rowDiv1 = document.createElement('div');
      // rowDiv.setAttribute("style", "width:100%");
      for (let j = 0; j < 68; j++) {
        var rowDiv1 = document.createElement('div');
        var colDiv = document.createElement('div');
        colDiv.setAttribute('id', i.toString() + '-' + j.toString());
        colDiv.setAttribute('style', 'width:20px;height:20px;');
        colDiv.setAttribute('class', 'col-div');

        if (this.boardCodes[i][j] === 4) {
          colDiv.classList.add('wall');
        } else if (this.boardCodes[i][j] === 2) {
          colDiv.classList.add('pm-player');
        } else if (this.boardCodes[i][j] === 31) {
          colDiv.classList.add('ghost');
          colDiv.classList.add('pink-ghost');
        } else if (this.boardCodes[i][j] === 32) {
          colDiv.classList.add('ghost');
          colDiv.classList.add('blue-ghost');
        } else if (this.boardCodes[i][j] === 33) {
          colDiv.classList.add('ghost');
          colDiv.classList.add('green-ghost');
        } else if (this.boardCodes[i][j] === 34) {
          colDiv.classList.add('ghost');
          colDiv.classList.add('orange-ghost');
        } else if (this.boardCodes[i][j] === 1) {
          colDiv.classList.add('food');
          this.randomArray.push(i.toString() + '-' + j.toString());

          colDiv.innerHTML = 'o';
        } else if (this.boardCodes[i][j] === 6) {
          this.randomArray.push(i.toString() + '-' + j.toString());
          colDiv.classList.add('fruit');
          colDiv.innerHTML = 'O';
        }
        rowDiv1.appendChild(colDiv);
        rowDiv.appendChild(rowDiv1);
        // rowDiv.appendChild(colDiv);
        document.getElementById('pacmanBoard').append(rowDiv);
        if (this.boardCodes[i][j] === 4) {
        }
      }
    }
  }

  startGame() {
    document.addEventListener('keydown', this.movePacman.bind(this));
    this.moveGhosts();
    //console.log(this.boardCodes);
  }

  movePacman(e) {
    //console.log('this.boardcodes:::::');
    //console.log(this.boardCodes);
    //var boardCodesImported = this.boardCodes;
    var boardCodesImported = this.getBoardCodes();
    //console.log('in movepacman');
    //console.log(boardCodesImported);
    //console.log('in move pacman function');
    var event = window.event ? window.event : e;

    var pmElement = document.querySelector('.pm-player');
    var id = pmElement.getAttribute('id');

    var i = Number(id.split('-')[0]);
    var j = Number(id.split('-')[1]);
    //console.log('::i:::' + i);
    //console.log(':::j:::' + j);
    //console.log('boardcodes::');
    //console.log(boardCodes);
    //if it contains food increment score and remove food using dom
    //keycode 37->left key
    //keycode 38-> up key
    //keycode 39->right key
    //keycode 40->down key

    //if key 37 and pac-man location is 11-0 then move to other side ->11-67
    //if key 39 and pac-man location is 11-67 then move to other side ->11-0
    if (event.keyCode === 37 && i === 11 && j === 0) {
      i = 11;
      j = 67;
      if (pmElement.classList.contains('food')) {
        pmElement.classList.remove('food');
        this.pacManScore++;
        pmElement.innerHTML = '';
        this.updateScore();
      } else if (pmElement.classList.contains('fruit')) {
        pmElement.classList.remove('fruit');
        this.pacManScore += 10;
        //increment the timer
        this.timer += 5000;
        this.scaredGhosts = true;
        pmElement.innerHTML = '';
        this.updateScore();
        // scareGhosts();
      }
      pmElement.classList.remove('pm-player');
      document
        .getElementById(i.toString() + '-' + j.toString())
        .classList.add('pm-player');
    } else if (event.keyCode === 39 && i === 11 && j === 67) {
      i = 11;
      j = 0;
      if (pmElement.classList.contains('food')) {
        pmElement.classList.remove('food');
        this.pacManScore++;
        pmElement.innerHTML = '';
        this.updateScore();
      } else if (pmElement.classList.contains('fruit')) {
        pmElement.classList.remove('fruit');
        this.pacManScore += 10;
        pmElement.innerHTML = '';
        this.updateScore();
        this.scareGhosts();
      }
      pmElement.classList.remove('pm-player');
      document
        .getElementById(i.toString() + '-' + j.toString())
        .classList.add('pm-player');
    } else if (event.keyCode === 37 && this.boardCodes[i][j - 1] !== 4) {
      j--;
      if (pmElement.classList.contains('food')) {
        pmElement.classList.remove('food');
        this.pacManScore++;
        pmElement.innerHTML = '';
        this.updateScore();
      } else if (pmElement.classList.contains('fruit')) {
        pmElement.classList.remove('fruit');
        this.pacManScore += 10;
        pmElement.innerHTML = '';
        this.updateScore();
        this.scareGhosts();
      }
      pmElement.classList.remove('pm-player');
      document
        .getElementById(i.toString() + '-' + j.toString())
        .classList.add('pm-player');
    }
    //up key
    else if (event.keyCode === 38 && this.boardCodes[i - 1][j] !== 4) {
      i--;
      if (pmElement.classList.contains('food')) {
        pmElement.classList.remove('food');
        this.pacManScore++;
        pmElement.innerHTML = '';
        this.updateScore();
      } else if (pmElement.classList.contains('fruit')) {
        pmElement.classList.remove('fruit');
        this.pacManScore += 10;
        pmElement.innerHTML = '';
        this.updateScore();
        this.scareGhosts();
      }

      pmElement.classList.remove('pm-player');
      document
        .getElementById(i.toString() + '-' + j.toString())
        .classList.add('pm-player');
    }
    //right key
    else if (event.keyCode === 39 && this.boardCodes[i][j + 1] !== 4) {
      j++;
      if (pmElement.classList.contains('food')) {
        pmElement.classList.remove('food');
        this.pacManScore++;
        pmElement.innerHTML = '';
        this.updateScore();
      } else if (pmElement.classList.contains('fruit')) {
        pmElement.classList.remove('fruit');
        this.pacManScore += 10;
        pmElement.innerHTML = '';
        this.updateScore();
        this.scareGhosts();
      }
      pmElement.classList.remove('pm-player');
      document
        .getElementById(i.toString() + '-' + j.toString())
        .classList.add('pm-player');
    }
    //down key
    else if (event.keyCode === 40 && this.boardCodes[i + 1][j] !== 4) {
      //console.log("boardcodes::" + boardCodes[i + 1][j]);

      i++;
      if (pmElement.classList.contains('food')) {
        pmElement.classList.remove('food');
        this.pacManScore++;
        pmElement.innerHTML = '';
        this.updateScore();
      } else if (pmElement.classList.contains('fruit')) {
        pmElement.classList.remove('fruit');
        this.pacManScore += 10;
        pmElement.innerHTML = '';
        this.updateScore();
        this.scareGhosts();
      }
      pmElement.classList.remove('pm-player');
      document
        .getElementById(i.toString() + '-' + j.toString())
        .classList.add('pm-player');
    }
    if (this.pacManScore === 860) {
      alert('YOU WON!!!!');
      this.stopGhosts();
    }
  }

  stopGhosts() {
    //this.movePG.clear();
    clearInterval(this.movePG);
    clearInterval(this.moveBG);
    clearInterval(this.moveGG);
    clearInterval(this.moveOG);
  }
  updateScore() {
    //console.log("pacmanscore:::" + pacManScore);
    document.querySelector('.score').innerHTML = this.pacManScore.toString();
  }

  moveGhosts() {
    console.log('before moving ghosts');
    //move each ghost at different speed
    this.movePG = setInterval(this.movePinkGhost.bind(this), 200);
    this.moveBG = setInterval(this.moveBlueGhost.bind(this), 400);
    this.moveGG = setInterval(this.moveGreenGost.bind(this), 600);
    this.moveOG = setInterval(this.moveOrangeGhost.bind(this), 800);
  }

  movePinkGhost() {
    //console.log("in move pink ghost");
    var pinkGhost = document.querySelector('.pink-ghost');
    var ghostId = pinkGhost.getAttribute('id');
    var i = parseInt(ghostId.split('-')[0]);
    var j = parseInt(ghostId.split('-')[1]);
    // var randArr = ["l", "t", "r", "b"];
    // var randno = Math.floor(Math.random() * 4);

    var pinkSourceNode = ghostId;
    if (this.scaredGhosts) {
      //console.log('dest if scared');
      var pinkDestNode = this.randomArray[
        Math.floor(Math.random() * this.randomArray.length)
      ];
    } else {
      pinkDestNode = document.querySelector('.pm-player').getAttribute('id');
    }

    //from current pink ghost position find the pac-man loaction and find path to that location

    var nextPos = this.findPath(pinkSourceNode, pinkDestNode);

    var nextI = nextPos.split('-')[0];
    var nextJ = nextPos.split('-')[1];

    if (
      !document
        .getElementById(nextI.toString() + '-' + nextJ.toString())
        .classList.contains('ghost')
    ) {
      pinkGhost.classList.remove('ghost');
      pinkGhost.classList.remove('pink-ghost');
      if (this.scaredGhosts) {
        pinkGhost.classList.remove('scared-ghost');
      }
      i = Number(nextI);
      j = Number(nextJ);
      var newGhost = document.getElementById(i.toString() + '-' + j.toString());
      newGhost.classList.add('ghost');
      newGhost.classList.add('pink-ghost');
      if (this.scaredGhosts) {
        newGhost.classList.add('scared-ghost');
      }
      if (
        document
          .getElementById(nextI.toString() + '-' + nextJ.toString())
          .classList.contains('pm-player')
      ) {
        if (this.scaredGhosts) {
          newGhost.classList.remove('ghost');
          newGhost.classList.remove('pink-ghost');
          newGhost.classList.remove('scared-ghost');
          var newGhost1 = document.getElementById('11-33');
          newGhost1.classList.add('ghost');
          newGhost1.classList.add('pink-ghost');
          if (this.scaredGhosts) {
            newGhost1.classList.add('scared-ghost');
          }
        } else {
          alert('Game Over!!');
        }
      }
    }
  }
  moveBlueGhost() {
    //console.log("in move blue ghost");
    var blueGhost = document.querySelector('.blue-ghost');
    var ghostId = blueGhost.getAttribute('id');
    var i = parseInt(ghostId.split('-')[0]);
    var j = parseInt(ghostId.split('-')[1]);

    var blueSourceNode = ghostId;
    if (this.scaredGhosts) {
      var blueDestNode = this.randomArray[
        Math.floor(Math.random() * this.randomArray.length)
      ];
    } else {
      blueDestNode = document.querySelector('.pm-player').getAttribute('id');
    }

    var nextPos = this.findPath(blueSourceNode, blueDestNode);

    var nextI = nextPos.split('-')[0];
    var nextJ = nextPos.split('-')[1];

    if (
      !document
        .getElementById(nextI.toString() + '-' + nextJ.toString())
        .classList.contains('ghost')
    ) {
      blueGhost.classList.remove('ghost');
      blueGhost.classList.remove('blue-ghost');
      if (this.scaredGhosts) {
        blueGhost.classList.remove('scared-ghost');
      }
      i = Number(nextI);
      j = Number(nextJ);
      var newGhost = document.getElementById(i.toString() + '-' + j.toString());
      newGhost.classList.add('ghost');
      newGhost.classList.add('blue-ghost');
      if (this.scaredGhosts) {
        newGhost.classList.add('scared-ghost');
      }

      if (
        document
          .getElementById(nextI.toString() + '-' + nextJ.toString())
          .classList.contains('pm-player')
      ) {
        // console.log("Hello!!!!");
        if (this.scaredGhosts) {
          newGhost.classList.remove('ghost');
          newGhost.classList.remove('blue-ghost');
          newGhost.classList.remove('scared-ghost');
          var newGhost1 = document.getElementById('11-37');
          newGhost1.classList.add('ghost');
          newGhost1.classList.add('blue-ghost');
          if (this.scaredGhosts) {
            newGhost1.classList.add('scared-ghost');
          }
        } else {
          alert('Game Over!!');
        }
      }
    }
  }
  moveGreenGost() {
    var greenGhost = document.querySelector('.green-ghost');
    var ghostId = greenGhost.getAttribute('id');
    var i = parseInt(ghostId.split('-')[0]);
    var j = parseInt(ghostId.split('-')[1]);

    var greenSourceNode = ghostId;
    if (this.scaredGhosts) {
      var greenDestNode = this.randomArray[
        Math.floor(Math.random() * this.randomArray.length)
      ];
    } else {
      greenDestNode = document.querySelector('.pm-player').getAttribute('id');
    }

    //console.log(pinkSourceNode);
    //console.log(pinkDestNode);
    var nextPos = this.findPath(greenSourceNode, greenDestNode);
    // console.log(nextPos);
    var nextI = nextPos.split('-')[0];
    var nextJ = nextPos.split('-')[1];
    //randno = 0;
    if (
      !document
        .getElementById(nextI.toString() + '-' + nextJ.toString())
        .classList.contains('ghost')
    ) {
      greenGhost.classList.remove('ghost');
      greenGhost.classList.remove('green-ghost');
      if (this.scaredGhosts) {
        greenGhost.classList.remove('scared-ghost');
      }
      i = Number(nextI);
      j = Number(nextJ);
      var newGhost = document.getElementById(i.toString() + '-' + j.toString());
      newGhost.classList.add('ghost');
      newGhost.classList.add('green-ghost');
      if (this.scaredGhosts) {
        newGhost.classList.add('scared-ghost');
      }

      if (
        document
          .getElementById(nextI.toString() + '-' + nextJ.toString())
          .classList.contains('pm-player')
      ) {
        if (this.scaredGhosts) {
          newGhost.classList.remove('ghost');
          newGhost.classList.remove('green-ghost');
          newGhost.classList.remove('scared-ghost');
          var newGhost1 = document.getElementById('12-33');
          newGhost1.classList.add('ghost');
          newGhost1.classList.add('green-ghost');
          if (this.scaredGhosts) {
            newGhost1.classList.add('scared-ghost');
          }
        } else {
          alert('Game Over!!');
        }
      }
    }
  }
  moveOrangeGhost() {
    var orangeGhost = document.querySelector('.orange-ghost');
    var ghostId = orangeGhost.getAttribute('id');
    var i = parseInt(ghostId.split('-')[0]);
    var j = parseInt(ghostId.split('-')[1]);

    var orangeSourceNode = ghostId;
    if (this.scaredGhosts) {
      var orangeDestNode = this.randomArray[
        Math.floor(Math.random() * this.randomArray.length)
      ];
    } else {
      orangeDestNode = document.querySelector('.pm-player').getAttribute('id');
    }

    var nextPos = this.findPath(orangeSourceNode, orangeDestNode);
    // console.log(nextPos);
    var nextI = nextPos.split('-')[0];
    var nextJ = nextPos.split('-')[1];
    //randno = 0;
    if (
      !document
        .getElementById(nextI.toString() + '-' + nextJ.toString())
        .classList.contains('ghost')
    ) {
      orangeGhost.classList.remove('ghost');
      orangeGhost.classList.remove('orange-ghost');
      if (this.scaredGhosts) {
        orangeGhost.classList.remove('scared-ghost');
      }
      i = Number(nextI);
      j = Number(nextJ);
      var newGhost = document.getElementById(i.toString() + '-' + j.toString());
      newGhost.classList.add('ghost');
      newGhost.classList.add('orange-ghost');
      if (this.scaredGhosts) {
        newGhost.classList.add('scared-ghost');
      }

      if (
        document
          .getElementById(nextI.toString() + '-' + nextJ.toString())
          .classList.contains('pm-player')
      ) {
        if (this.scaredGhosts) {
          newGhost.classList.remove('ghost');
          newGhost.classList.remove('orange-ghost');
          newGhost.classList.remove('orange-ghost');
          var newGhost1 = document.getElementById('12-37');
          newGhost1.classList.add('ghost');
          newGhost1.classList.add('orange-ghost');
          if (this.scaredGhosts) {
            newGhost1.classList.add('scared-ghost');
          }
        } else {
          alert('Game Over!!');
        }
      }
    }
  }

  findPath(sourceNode: string, destNode: string): string {
    //console.log('in function findpath');
    var unvisitedNodes = new Array();
    var shortestPathToNodes = new Array();
    var visitedNodes = new Array();
    var destinationReached = false;
    var reachablePath = new Array();
    shortestPathToNodes.push(new Array());
    shortestPathToNodes[shortestPathToNodes.length - 1].push(sourceNode);
    dijkstra(shortestPathToNodes, this.boardCodes);
    while (!destinationReached) {
      dijkstra(shortestPathToNodes, this.boardCodes);
    }

    return reachablePath[1];
    function dijkstra(nodes, boardCodes) {
      var arrLength = shortestPathToNodes.length;
      for (let i = 0; i < arrLength; i++) {
        if (
          !visitedNodes.includes(
            shortestPathToNodes[i][shortestPathToNodes[i].length - 1]
          ) &&
          boardCodes[
            shortestPathToNodes[i][shortestPathToNodes[i].length - 1].split(
              '-'
            )[0]
          ][
            shortestPathToNodes[i][shortestPathToNodes[i].length - 1].split(
              '-'
            )[1]
          ] !== 4
        ) {
          var inode = parseInt(
            shortestPathToNodes[i][shortestPathToNodes[i].length - 1].split(
              '-'
            )[0]
          );
          var jnode = parseInt(
            shortestPathToNodes[i][shortestPathToNodes[i].length - 1].split(
              '-'
            )[1]
          );

          if (inode + 1 < 26 && !destinationReached) {
            shortestPathToNodes.push(
              shortestPathToNodes[i].concat(
                (inode + 1).toString() + '-' + jnode.toString()
              )
            );
            if ((inode + 1).toString() + '-' + jnode.toString() === destNode) {
              destinationReached = true;

              reachablePath = shortestPathToNodes[i];
              reachablePath.push(
                (inode + 1).toString() + '-' + jnode.toString()
              );
            }
          }
          if (inode - 1 >= 0 && !destinationReached) {
            shortestPathToNodes.push(
              shortestPathToNodes[i].concat(
                (inode - 1).toString() + '-' + jnode.toString()
              )
            );
            if ((inode - 1).toString() + '-' + jnode.toString() === destNode) {
              destinationReached = true;

              reachablePath = shortestPathToNodes[i];
              reachablePath.push(
                (inode - 1).toString() + '-' + jnode.toString()
              );
            }
          }
          if (jnode + 1 < 68 && !destinationReached) {
            shortestPathToNodes.push(
              shortestPathToNodes[i].concat(
                inode.toString() + '-' + (jnode + 1).toString()
              )
            );
            if (inode.toString() + '-' + (jnode + 1).toString() === destNode) {
              destinationReached = true;

              reachablePath = shortestPathToNodes[i];
              reachablePath.push(
                inode.toString() + '-' + (jnode + 1).toString()
              );
            }
          }
          if (jnode - 1 >= 0 && !destinationReached) {
            shortestPathToNodes.push(
              shortestPathToNodes[i].concat(
                inode.toString() + '-' + (jnode - 1).toString()
              )
            );
            if (inode.toString() + '-' + (jnode - 1).toString() === destNode) {
              destinationReached = true;

              reachablePath = shortestPathToNodes[i];
              reachablePath.push(
                inode.toString() + '-' + (jnode - 1).toString()
              );
            }
          }

          visitedNodes.push(
            shortestPathToNodes[i][shortestPathToNodes[i].length - 1]
          );
          // timercount += 10;
        }
      }
    }
  }

  //setInterval(this.clearScareGhost, 5000);

  scareGhosts() {
    var elements = document.querySelectorAll('.ghost');
    this.scaredGhosts = true;
    // alreadyScaredGhosts = true;
    // console.log("elements::", elements);
    for (let i = 0; i <= 3; i++) {
      if (elements[i].classList.contains('scared-ghost')) {
        this.alreadyScaredGhosts = true;

        break;
      }
      elements[i].classList.add('scared-ghost');
    }
    setTimeout(this.clearScareGhost.bind(this), 5000);
  }
  //var timer=setTimeout(clearScareGhost,5000)
  clearScareGhost() {
    if (this.alreadyScaredGhosts) {
      setTimeout(this.clearScareGhost.bind(this), 5000);
      this.alreadyScaredGhosts = false;
    } else {
      var elements = document.querySelectorAll('.ghost');
      for (let i = 0; i <= 3; i++) {
        if (this.scaredGhosts) {
          elements[i].classList.remove('scared-ghost');
        }
      }
      this.scaredGhosts = false;
      // console.log("after 5 secs", elements);
    }
    // if (scaredGhosts) {
    //   var elements = document.querySelectorAll(".ghost");
    //   for (let i = 0; i <= 3; i++) {
    //     elements[i].classList.remove("scared-ghost");
    //   }
    //   scaredGhosts = false;
    //   console.log("after 5 secs", elements);
    // }
  }

  getBoardCodes(): number[][] {
    console.log('in get boardcodes function');
    return this.boardCodes;
  }
  helloWorld() {
    console.log('hello world!! :D');
  }
}
